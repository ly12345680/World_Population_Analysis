{"ast":null,"code":"const acos = Math.acos,\n  asin = Math.asin,\n  atan2 = Math.atan2,\n  cos = Math.cos,\n  hypot = Math.hypot,\n  max = Math.max,\n  min = Math.min,\n  PI = Math.PI,\n  sin = Math.sin,\n  radians = PI / 180,\n  degrees = 180 / PI;\nclass Versor {\n  static fromCartesian([x, y, z]) {\n    return [0, z, -y, x];\n  }\n  static fromAngles([l, p, g]) {\n    l *= radians / 2;\n    p *= radians / 2;\n    g = (g || 0) * radians / 2;\n    const sl = sin(l),\n      cl = cos(l);\n    const sp = sin(p),\n      cp = cos(p);\n    const sg = sin(g),\n      cg = cos(g);\n    return [cl * cp * cg + sl * sp * sg, sl * cp * cg - cl * sp * sg, cl * sp * cg + sl * cp * sg, cl * cp * sg - sl * sp * cg];\n  }\n  static toAngles([a, b, c, d]) {\n    return [atan2(2 * (a * b + c * d), 1 - 2 * (b * b + c * c)) * degrees, asin(max(-1, min(1, 2 * (a * c - d * b)))) * degrees, atan2(2 * (a * d + b * c), 1 - 2 * (c * c + d * d)) * degrees];\n  }\n  static interpolateAngles(a, b) {\n    const i = Versor.interpolate(Versor.fromAngles(a), Versor.fromAngles(b));\n    return t => Versor.toAngles(i(t));\n  }\n  static interpolateLinear([a1, b1, c1, d1], [a2, b2, c2, d2]) {\n    a2 -= a1, b2 -= b1, c2 -= c1, d2 -= d1;\n    const x = new Array(4);\n    return t => {\n      const l = hypot(x[0] = a1 + a2 * t, x[1] = b1 + b2 * t, x[2] = c1 + c2 * t, x[3] = d1 + d2 * t);\n      x[0] /= l, x[1] /= l, x[2] /= l, x[3] /= l;\n      return x;\n    };\n  }\n  static interpolate([a1, b1, c1, d1], [a2, b2, c2, d2]) {\n    let dot = Versor.dot([a1, b1, c1, d1], [a2, b2, c2, d2]);\n    if (dot < 0) a2 = -a2, b2 = -b2, c2 = -c2, d2 = -d2, dot = -dot;\n    if (dot > 0.9995) return Versor.interpolateLinear([a1, b1, c1, d1], [a2, b2, c2, d2]);\n    const theta0 = acos(max(-1, min(1, dot)));\n    const x = new Array(4);\n    const l = hypot(a2 -= a1 * dot, b2 -= b1 * dot, c2 -= c1 * dot, d2 -= d1 * dot);\n    a2 /= l, b2 /= l, c2 /= l, d2 /= l;\n    return t => {\n      const theta = theta0 * t;\n      const s = sin(theta);\n      const c = cos(theta);\n      x[0] = a1 * c + a2 * s;\n      x[1] = b1 * c + b2 * s;\n      x[2] = c1 * c + c2 * s;\n      x[3] = d1 * c + d2 * s;\n      return x;\n    };\n  }\n  static dot([a1, b1, c1, d1], [a2, b2, c2, d2]) {\n    return a1 * a2 + b1 * b2 + c1 * c2 + d1 * d2;\n  }\n  static multiply([a1, b1, c1, d1], [a2, b2, c2, d2]) {\n    return [a1 * a2 - b1 * b2 - c1 * c2 - d1 * d2, a1 * b2 + b1 * a2 + c1 * d2 - d1 * c2, a1 * c2 - b1 * d2 + c1 * a2 + d1 * b2, a1 * d2 + b1 * c2 - c1 * b2 + d1 * a2];\n  }\n}\n\n/*\n * Old API\n */\n\n// Returns the unit quaternion for the given Euler rotation angles [λ, φ, γ].\nconst versor = Versor.fromAngles;\n\n// Returns the quaternion that represents q0 * q1.\nversor.multiply = Versor.multiply;\n\n// Returns the Euler rotation angles [λ, φ, γ] for the given quaternion.\nversor.rotation = Versor.toAngles;\n\n// interpolate angles\nversor.interpolate = Versor.interpolateAngles;\n\n// Returns Cartesian coordinates [x, y, z] given spherical coordinates [λ, φ].\nversor.cartesian = function (e) {\n  const l = e[0] * radians,\n    p = e[1] * radians,\n    cp = cos(p);\n  return [cp * cos(l), cp * sin(l), sin(p)];\n};\n\n// Returns the quaternion to rotate between two cartesian points on the sphere.\n// alpha for tweening [0,1]\n// see https://github.com/Fil/versor/issues/8\nversor.delta = function (v0, v1, alpha) {\n  if (arguments.length == 2) alpha = 1;\n  const sqrt = Math.sqrt;\n  function cross(v0, v1) {\n    return [v0[1] * v1[2] - v0[2] * v1[1], v0[2] * v1[0] - v0[0] * v1[2], v0[0] * v1[1] - v0[1] * v1[0]];\n  }\n  function dot(v0, v1) {\n    return v0[0] * v1[0] + v0[1] * v1[1] + v0[2] * v1[2];\n  }\n  const w = cross(v0, v1),\n    l = sqrt(dot(w, w));\n  if (!l) return [1, 0, 0, 0];\n  const t = alpha * acos(max(-1, min(1, dot(v0, v1)))) / 2,\n    s = sin(t); // t = θ / 2\n  return [cos(t), w[2] / l * s, -w[1] / l * s, w[0] / l * s];\n};\nexport default versor;","map":{"version":3,"names":["acos","Math","asin","atan2","cos","hypot","max","min","PI","sin","radians","degrees","Versor","fromCartesian","x","y","z","fromAngles","l","p","g","sl","cl","sp","cp","sg","cg","toAngles","a","b","c","d","interpolateAngles","i","interpolate","t","interpolateLinear","a1","b1","c1","d1","a2","b2","c2","d2","Array","dot","theta0","theta","s","multiply","versor","rotation","cartesian","e","delta","v0","v1","alpha","arguments","length","sqrt","cross","w"],"sources":["/Users/nguyenhaiharry/Library/CloudStorage/OneDrive-VietNamNationalUniversity-HCMINTERNATIONALUNIVERSITY/Desktop/Sem1_2023-2024/DVDS/World_Population_Analysis/global-population/population-analysis/node_modules/versor/src/index.js"],"sourcesContent":["const acos = Math.acos,\n    asin = Math.asin,\n    atan2 = Math.atan2,\n    cos = Math.cos,\n    hypot = Math.hypot,\n    max = Math.max,\n    min = Math.min,\n    PI = Math.PI,\n    sin = Math.sin,\n    radians = PI / 180,\n    degrees = 180 / PI;\n\nclass Versor {\n  static fromCartesian([x, y, z]) {\n    return [0, z, -y, x];\n  }\n  static fromAngles([l, p, g]) {\n    l *= radians / 2;\n    p *= radians / 2;\n    g = (g||0) * radians / 2;\n    const sl = sin(l), cl = cos(l);\n    const sp = sin(p), cp = cos(p);\n    const sg = sin(g), cg = cos(g);\n    return [\n      cl * cp * cg + sl * sp * sg,\n      sl * cp * cg - cl * sp * sg,\n      cl * sp * cg + sl * cp * sg,\n      cl * cp * sg - sl * sp * cg\n    ];\n  }\n  static toAngles([a, b, c, d]) {\n    return [\n      atan2(2 * (a * b + c * d), 1 - 2 * (b * b + c * c)) * degrees,\n      asin(max(-1, min(1, 2 * (a * c - d * b)))) * degrees,\n      atan2(2 * (a * d + b * c), 1 - 2 * (c * c + d * d)) * degrees\n    ];\n  }\n  static interpolateAngles(a, b) {\n    const i = Versor.interpolate(Versor.fromAngles(a), Versor.fromAngles(b));\n    return t => Versor.toAngles(i(t));\n  }\n  static interpolateLinear([a1, b1, c1, d1], [a2, b2, c2, d2]) {\n    a2 -= a1, b2 -= b1, c2 -= c1, d2 -= d1;\n    const x = new Array(4);\n    return t => {\n      const l = hypot(x[0] = a1 + a2 * t, x[1] = b1 + b2 * t, x[2] = c1 + c2 * t, x[3] = d1 + d2 * t);\n      x[0] /= l, x[1] /= l, x[2] /= l, x[3] /= l;\n      return x;\n    };\n  }\n  static interpolate([a1, b1, c1, d1], [a2, b2, c2, d2]) {\n    let dot = Versor.dot([a1, b1, c1, d1], [a2, b2, c2, d2]);\n    if (dot < 0) a2 = -a2, b2 = -b2, c2 = -c2, d2 = -d2, dot = -dot;\n    if (dot > 0.9995) return Versor.interpolateLinear([a1, b1, c1, d1], [a2, b2, c2, d2]); \n    const theta0 = acos(max(-1, min(1, dot)));\n    const x = new Array(4);\n    const l = hypot(a2 -= a1 * dot, b2 -= b1 * dot, c2 -= c1 * dot, d2 -= d1 * dot);\n    a2 /= l, b2 /= l, c2 /= l, d2 /= l;\n    return t => {\n      const theta = theta0 * t;\n      const s = sin(theta);\n      const c = cos(theta);\n      x[0] = a1 * c + a2 * s;\n      x[1] = b1 * c + b2 * s;\n      x[2] = c1 * c + c2 * s;\n      x[3] = d1 * c + d2 * s;\n      return x;\n    };\n  }\n  static dot([a1, b1, c1, d1], [a2, b2, c2, d2]) {\n    return a1 * a2 + b1 * b2 + c1 * c2 + d1 * d2;\n  }\n  static multiply([a1, b1, c1, d1], [a2, b2, c2, d2]) {\n    return [\n      a1 * a2 - b1 * b2 - c1 * c2 - d1 * d2,\n      a1 * b2 + b1 * a2 + c1 * d2 - d1 * c2,\n      a1 * c2 - b1 * d2 + c1 * a2 + d1 * b2,\n      a1 * d2 + b1 * c2 - c1 * b2 + d1 * a2\n    ];\n  }\n}\n\n/*\n * Old API\n */\n\n// Returns the unit quaternion for the given Euler rotation angles [λ, φ, γ].\nconst versor = Versor.fromAngles;\n\n// Returns the quaternion that represents q0 * q1.\nversor.multiply = Versor.multiply;\n\n// Returns the Euler rotation angles [λ, φ, γ] for the given quaternion.\nversor.rotation = Versor.toAngles;\n\n// interpolate angles\nversor.interpolate = Versor.interpolateAngles;\n\n// Returns Cartesian coordinates [x, y, z] given spherical coordinates [λ, φ].\nversor.cartesian = function(e) {\n  const l = e[0] * radians, p = e[1] * radians, cp = cos(p);\n  return [cp * cos(l), cp * sin(l), sin(p)];\n};\n\n// Returns the quaternion to rotate between two cartesian points on the sphere.\n// alpha for tweening [0,1]\n// see https://github.com/Fil/versor/issues/8\nversor.delta = function(v0, v1, alpha) {\n  if (arguments.length == 2) alpha = 1;\n\n  const sqrt = Math.sqrt;\n  function cross(v0, v1) {\n    return  [v0[1] * v1[2] - v0[2] * v1[1], v0[2] * v1[0] - v0[0] * v1[2], v0[0] * v1[1] - v0[1] * v1[0]];\n  }\n  function dot(v0, v1) {\n    return v0[0] * v1[0] + v0[1] * v1[1] + v0[2] * v1[2];\n  }\n\n  const w = cross(v0, v1), l = sqrt(dot(w, w));\n  if (!l) return [1, 0, 0, 0];\n  const t = alpha * acos(max(-1, min(1, dot(v0, v1)))) / 2, s = sin(t); // t = θ / 2\n  return [cos(t), w[2] / l * s, -w[1] / l * s, w[0] / l * s];\n};\n\nexport default versor;"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,IAAI,CAACD,IAAI;EAClBE,IAAI,GAAGD,IAAI,CAACC,IAAI;EAChBC,KAAK,GAAGF,IAAI,CAACE,KAAK;EAClBC,GAAG,GAAGH,IAAI,CAACG,GAAG;EACdC,KAAK,GAAGJ,IAAI,CAACI,KAAK;EAClBC,GAAG,GAAGL,IAAI,CAACK,GAAG;EACdC,GAAG,GAAGN,IAAI,CAACM,GAAG;EACdC,EAAE,GAAGP,IAAI,CAACO,EAAE;EACZC,GAAG,GAAGR,IAAI,CAACQ,GAAG;EACdC,OAAO,GAAGF,EAAE,GAAG,GAAG;EAClBG,OAAO,GAAG,GAAG,GAAGH,EAAE;AAEtB,MAAMI,MAAM,CAAC;EACX,OAAOC,aAAaA,CAAC,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,EAAE;IAC9B,OAAO,CAAC,CAAC,EAAEA,CAAC,EAAE,CAACD,CAAC,EAAED,CAAC,CAAC;EACtB;EACA,OAAOG,UAAUA,CAAC,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,EAAE;IAC3BF,CAAC,IAAIR,OAAO,GAAG,CAAC;IAChBS,CAAC,IAAIT,OAAO,GAAG,CAAC;IAChBU,CAAC,GAAG,CAACA,CAAC,IAAE,CAAC,IAAIV,OAAO,GAAG,CAAC;IACxB,MAAMW,EAAE,GAAGZ,GAAG,CAACS,CAAC,CAAC;MAAEI,EAAE,GAAGlB,GAAG,CAACc,CAAC,CAAC;IAC9B,MAAMK,EAAE,GAAGd,GAAG,CAACU,CAAC,CAAC;MAAEK,EAAE,GAAGpB,GAAG,CAACe,CAAC,CAAC;IAC9B,MAAMM,EAAE,GAAGhB,GAAG,CAACW,CAAC,CAAC;MAAEM,EAAE,GAAGtB,GAAG,CAACgB,CAAC,CAAC;IAC9B,OAAO,CACLE,EAAE,GAAGE,EAAE,GAAGE,EAAE,GAAGL,EAAE,GAAGE,EAAE,GAAGE,EAAE,EAC3BJ,EAAE,GAAGG,EAAE,GAAGE,EAAE,GAAGJ,EAAE,GAAGC,EAAE,GAAGE,EAAE,EAC3BH,EAAE,GAAGC,EAAE,GAAGG,EAAE,GAAGL,EAAE,GAAGG,EAAE,GAAGC,EAAE,EAC3BH,EAAE,GAAGE,EAAE,GAAGC,EAAE,GAAGJ,EAAE,GAAGE,EAAE,GAAGG,EAAE,CAC5B;EACH;EACA,OAAOC,QAAQA,CAAC,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,EAAE;IAC5B,OAAO,CACL5B,KAAK,CAAC,CAAC,IAAIyB,CAAC,GAAGC,CAAC,GAAGC,CAAC,GAAGC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAIF,CAAC,GAAGA,CAAC,GAAGC,CAAC,GAAGA,CAAC,CAAC,CAAC,GAAGnB,OAAO,EAC7DT,IAAI,CAACI,GAAG,CAAC,CAAC,CAAC,EAAEC,GAAG,CAAC,CAAC,EAAE,CAAC,IAAIqB,CAAC,GAAGE,CAAC,GAAGC,CAAC,GAAGF,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGlB,OAAO,EACpDR,KAAK,CAAC,CAAC,IAAIyB,CAAC,GAAGG,CAAC,GAAGF,CAAC,GAAGC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAIA,CAAC,GAAGA,CAAC,GAAGC,CAAC,GAAGA,CAAC,CAAC,CAAC,GAAGpB,OAAO,CAC9D;EACH;EACA,OAAOqB,iBAAiBA,CAACJ,CAAC,EAAEC,CAAC,EAAE;IAC7B,MAAMI,CAAC,GAAGrB,MAAM,CAACsB,WAAW,CAACtB,MAAM,CAACK,UAAU,CAACW,CAAC,CAAC,EAAEhB,MAAM,CAACK,UAAU,CAACY,CAAC,CAAC,CAAC;IACxE,OAAOM,CAAC,IAAIvB,MAAM,CAACe,QAAQ,CAACM,CAAC,CAACE,CAAC,CAAC,CAAC;EACnC;EACA,OAAOC,iBAAiBA,CAAC,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,EAAE,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,EAAE;IAC3DH,EAAE,IAAIJ,EAAE,EAAEK,EAAE,IAAIJ,EAAE,EAAEK,EAAE,IAAIJ,EAAE,EAAEK,EAAE,IAAIJ,EAAE;IACtC,MAAM1B,CAAC,GAAG,IAAI+B,KAAK,CAAC,CAAC,CAAC;IACtB,OAAOV,CAAC,IAAI;MACV,MAAMjB,CAAC,GAAGb,KAAK,CAACS,CAAC,CAAC,CAAC,CAAC,GAAGuB,EAAE,GAAGI,EAAE,GAAGN,CAAC,EAAErB,CAAC,CAAC,CAAC,CAAC,GAAGwB,EAAE,GAAGI,EAAE,GAAGP,CAAC,EAAErB,CAAC,CAAC,CAAC,CAAC,GAAGyB,EAAE,GAAGI,EAAE,GAAGR,CAAC,EAAErB,CAAC,CAAC,CAAC,CAAC,GAAG0B,EAAE,GAAGI,EAAE,GAAGT,CAAC,CAAC;MAC/FrB,CAAC,CAAC,CAAC,CAAC,IAAII,CAAC,EAAEJ,CAAC,CAAC,CAAC,CAAC,IAAII,CAAC,EAAEJ,CAAC,CAAC,CAAC,CAAC,IAAII,CAAC,EAAEJ,CAAC,CAAC,CAAC,CAAC,IAAII,CAAC;MAC1C,OAAOJ,CAAC;IACV,CAAC;EACH;EACA,OAAOoB,WAAWA,CAAC,CAACG,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,EAAE,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,EAAE;IACrD,IAAIE,GAAG,GAAGlC,MAAM,CAACkC,GAAG,CAAC,CAACT,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,EAAE,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,CAAC;IACxD,IAAIE,GAAG,GAAG,CAAC,EAAEL,EAAE,GAAG,CAACA,EAAE,EAAEC,EAAE,GAAG,CAACA,EAAE,EAAEC,EAAE,GAAG,CAACA,EAAE,EAAEC,EAAE,GAAG,CAACA,EAAE,EAAEE,GAAG,GAAG,CAACA,GAAG;IAC/D,IAAIA,GAAG,GAAG,MAAM,EAAE,OAAOlC,MAAM,CAACwB,iBAAiB,CAAC,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,EAAE,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,CAAC;IACrF,MAAMG,MAAM,GAAG/C,IAAI,CAACM,GAAG,CAAC,CAAC,CAAC,EAAEC,GAAG,CAAC,CAAC,EAAEuC,GAAG,CAAC,CAAC,CAAC;IACzC,MAAMhC,CAAC,GAAG,IAAI+B,KAAK,CAAC,CAAC,CAAC;IACtB,MAAM3B,CAAC,GAAGb,KAAK,CAACoC,EAAE,IAAIJ,EAAE,GAAGS,GAAG,EAAEJ,EAAE,IAAIJ,EAAE,GAAGQ,GAAG,EAAEH,EAAE,IAAIJ,EAAE,GAAGO,GAAG,EAAEF,EAAE,IAAIJ,EAAE,GAAGM,GAAG,CAAC;IAC/EL,EAAE,IAAIvB,CAAC,EAAEwB,EAAE,IAAIxB,CAAC,EAAEyB,EAAE,IAAIzB,CAAC,EAAE0B,EAAE,IAAI1B,CAAC;IAClC,OAAOiB,CAAC,IAAI;MACV,MAAMa,KAAK,GAAGD,MAAM,GAAGZ,CAAC;MACxB,MAAMc,CAAC,GAAGxC,GAAG,CAACuC,KAAK,CAAC;MACpB,MAAMlB,CAAC,GAAG1B,GAAG,CAAC4C,KAAK,CAAC;MACpBlC,CAAC,CAAC,CAAC,CAAC,GAAGuB,EAAE,GAAGP,CAAC,GAAGW,EAAE,GAAGQ,CAAC;MACtBnC,CAAC,CAAC,CAAC,CAAC,GAAGwB,EAAE,GAAGR,CAAC,GAAGY,EAAE,GAAGO,CAAC;MACtBnC,CAAC,CAAC,CAAC,CAAC,GAAGyB,EAAE,GAAGT,CAAC,GAAGa,EAAE,GAAGM,CAAC;MACtBnC,CAAC,CAAC,CAAC,CAAC,GAAG0B,EAAE,GAAGV,CAAC,GAAGc,EAAE,GAAGK,CAAC;MACtB,OAAOnC,CAAC;IACV,CAAC;EACH;EACA,OAAOgC,GAAGA,CAAC,CAACT,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,EAAE,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,EAAE;IAC7C,OAAOP,EAAE,GAAGI,EAAE,GAAGH,EAAE,GAAGI,EAAE,GAAGH,EAAE,GAAGI,EAAE,GAAGH,EAAE,GAAGI,EAAE;EAC9C;EACA,OAAOM,QAAQA,CAAC,CAACb,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,EAAE,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,EAAE;IAClD,OAAO,CACLP,EAAE,GAAGI,EAAE,GAAGH,EAAE,GAAGI,EAAE,GAAGH,EAAE,GAAGI,EAAE,GAAGH,EAAE,GAAGI,EAAE,EACrCP,EAAE,GAAGK,EAAE,GAAGJ,EAAE,GAAGG,EAAE,GAAGF,EAAE,GAAGK,EAAE,GAAGJ,EAAE,GAAGG,EAAE,EACrCN,EAAE,GAAGM,EAAE,GAAGL,EAAE,GAAGM,EAAE,GAAGL,EAAE,GAAGE,EAAE,GAAGD,EAAE,GAAGE,EAAE,EACrCL,EAAE,GAAGO,EAAE,GAAGN,EAAE,GAAGK,EAAE,GAAGJ,EAAE,GAAGG,EAAE,GAAGF,EAAE,GAAGC,EAAE,CACtC;EACH;AACF;;AAEA;AACA;AACA;;AAEA;AACA,MAAMU,MAAM,GAAGvC,MAAM,CAACK,UAAU;;AAEhC;AACAkC,MAAM,CAACD,QAAQ,GAAGtC,MAAM,CAACsC,QAAQ;;AAEjC;AACAC,MAAM,CAACC,QAAQ,GAAGxC,MAAM,CAACe,QAAQ;;AAEjC;AACAwB,MAAM,CAACjB,WAAW,GAAGtB,MAAM,CAACoB,iBAAiB;;AAE7C;AACAmB,MAAM,CAACE,SAAS,GAAG,UAASC,CAAC,EAAE;EAC7B,MAAMpC,CAAC,GAAGoC,CAAC,CAAC,CAAC,CAAC,GAAG5C,OAAO;IAAES,CAAC,GAAGmC,CAAC,CAAC,CAAC,CAAC,GAAG5C,OAAO;IAAEc,EAAE,GAAGpB,GAAG,CAACe,CAAC,CAAC;EACzD,OAAO,CAACK,EAAE,GAAGpB,GAAG,CAACc,CAAC,CAAC,EAAEM,EAAE,GAAGf,GAAG,CAACS,CAAC,CAAC,EAAET,GAAG,CAACU,CAAC,CAAC,CAAC;AAC3C,CAAC;;AAED;AACA;AACA;AACAgC,MAAM,CAACI,KAAK,GAAG,UAASC,EAAE,EAAEC,EAAE,EAAEC,KAAK,EAAE;EACrC,IAAIC,SAAS,CAACC,MAAM,IAAI,CAAC,EAAEF,KAAK,GAAG,CAAC;EAEpC,MAAMG,IAAI,GAAG5D,IAAI,CAAC4D,IAAI;EACtB,SAASC,KAAKA,CAACN,EAAE,EAAEC,EAAE,EAAE;IACrB,OAAQ,CAACD,EAAE,CAAC,CAAC,CAAC,GAAGC,EAAE,CAAC,CAAC,CAAC,GAAGD,EAAE,CAAC,CAAC,CAAC,GAAGC,EAAE,CAAC,CAAC,CAAC,EAAED,EAAE,CAAC,CAAC,CAAC,GAAGC,EAAE,CAAC,CAAC,CAAC,GAAGD,EAAE,CAAC,CAAC,CAAC,GAAGC,EAAE,CAAC,CAAC,CAAC,EAAED,EAAE,CAAC,CAAC,CAAC,GAAGC,EAAE,CAAC,CAAC,CAAC,GAAGD,EAAE,CAAC,CAAC,CAAC,GAAGC,EAAE,CAAC,CAAC,CAAC,CAAC;EACvG;EACA,SAASX,GAAGA,CAACU,EAAE,EAAEC,EAAE,EAAE;IACnB,OAAOD,EAAE,CAAC,CAAC,CAAC,GAAGC,EAAE,CAAC,CAAC,CAAC,GAAGD,EAAE,CAAC,CAAC,CAAC,GAAGC,EAAE,CAAC,CAAC,CAAC,GAAGD,EAAE,CAAC,CAAC,CAAC,GAAGC,EAAE,CAAC,CAAC,CAAC;EACtD;EAEA,MAAMM,CAAC,GAAGD,KAAK,CAACN,EAAE,EAAEC,EAAE,CAAC;IAAEvC,CAAC,GAAG2C,IAAI,CAACf,GAAG,CAACiB,CAAC,EAAEA,CAAC,CAAC,CAAC;EAC5C,IAAI,CAAC7C,CAAC,EAAE,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC3B,MAAMiB,CAAC,GAAGuB,KAAK,GAAG1D,IAAI,CAACM,GAAG,CAAC,CAAC,CAAC,EAAEC,GAAG,CAAC,CAAC,EAAEuC,GAAG,CAACU,EAAE,EAAEC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IAAER,CAAC,GAAGxC,GAAG,CAAC0B,CAAC,CAAC,CAAC,CAAC;EACtE,OAAO,CAAC/B,GAAG,CAAC+B,CAAC,CAAC,EAAE4B,CAAC,CAAC,CAAC,CAAC,GAAG7C,CAAC,GAAG+B,CAAC,EAAE,CAACc,CAAC,CAAC,CAAC,CAAC,GAAG7C,CAAC,GAAG+B,CAAC,EAAEc,CAAC,CAAC,CAAC,CAAC,GAAG7C,CAAC,GAAG+B,CAAC,CAAC;AAC5D,CAAC;AAED,eAAeE,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}