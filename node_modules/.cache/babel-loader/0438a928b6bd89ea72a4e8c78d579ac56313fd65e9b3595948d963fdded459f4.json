{"ast":null,"code":"import Delaunator from \"delaunator\";\nimport Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\nimport Voronoi from \"./voronoi.js\";\nconst tau = 2 * Math.PI,\n  pow = Math.pow;\nfunction pointX(p) {\n  return p[0];\n}\nfunction pointY(p) {\n  return p[1];\n}\n\n// A triangulation is collinear if all its triangles have a non-null area\nfunction collinear(d) {\n  const {\n    triangles,\n    coords\n  } = d;\n  for (let i = 0; i < triangles.length; i += 3) {\n    const a = 2 * triangles[i],\n      b = 2 * triangles[i + 1],\n      c = 2 * triangles[i + 2],\n      cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1]) - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);\n    if (cross > 1e-10) return false;\n  }\n  return true;\n}\nfunction jitter(x, y, r) {\n  return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];\n}\nexport default class Delaunay {\n  static from(points, fx = pointX, fy = pointY, that) {\n    return new Delaunay(\"length\" in points ? flatArray(points, fx, fy, that) : Float64Array.from(flatIterable(points, fx, fy, that)));\n  }\n  constructor(points) {\n    this._delaunator = new Delaunator(points);\n    this.inedges = new Int32Array(points.length / 2);\n    this._hullIndex = new Int32Array(points.length / 2);\n    this.points = this._delaunator.coords;\n    this._init();\n  }\n  update() {\n    this._delaunator.update();\n    this._init();\n    return this;\n  }\n  _init() {\n    const d = this._delaunator,\n      points = this.points;\n\n    // check for collinear\n    if (d.hull && d.hull.length > 2 && collinear(d)) {\n      this.collinear = Int32Array.from({\n        length: points.length / 2\n      }, (_, i) => i).sort((i, j) => points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]); // for exact neighbors\n      const e = this.collinear[0],\n        f = this.collinear[this.collinear.length - 1],\n        bounds = [points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1]],\n        r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);\n      for (let i = 0, n = points.length / 2; i < n; ++i) {\n        const p = jitter(points[2 * i], points[2 * i + 1], r);\n        points[2 * i] = p[0];\n        points[2 * i + 1] = p[1];\n      }\n      this._delaunator = new Delaunator(points);\n    } else {\n      delete this.collinear;\n    }\n    const halfedges = this.halfedges = this._delaunator.halfedges;\n    const hull = this.hull = this._delaunator.hull;\n    const triangles = this.triangles = this._delaunator.triangles;\n    const inedges = this.inedges.fill(-1);\n    const hullIndex = this._hullIndex.fill(-1);\n\n    // Compute an index from each point to an (arbitrary) incoming halfedge\n    // Used to give the first neighbor of each point; for this reason,\n    // on the hull we give priority to exterior halfedges\n    for (let e = 0, n = halfedges.length; e < n; ++e) {\n      const p = triangles[e % 3 === 2 ? e - 2 : e + 1];\n      if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;\n    }\n    for (let i = 0, n = hull.length; i < n; ++i) {\n      hullIndex[hull[i]] = i;\n    }\n\n    // degenerate case: 1 or 2 (distinct) points\n    if (hull.length <= 2 && hull.length > 0) {\n      this.triangles = new Int32Array(3).fill(-1);\n      this.halfedges = new Int32Array(3).fill(-1);\n      this.triangles[0] = hull[0];\n      inedges[hull[0]] = 1;\n      if (hull.length === 2) {\n        inedges[hull[1]] = 0;\n        this.triangles[1] = hull[1];\n        this.triangles[2] = hull[1];\n      }\n    }\n  }\n  voronoi(bounds) {\n    return new Voronoi(this, bounds);\n  }\n  *neighbors(i) {\n    const {\n      inedges,\n      hull,\n      _hullIndex,\n      halfedges,\n      triangles,\n      collinear\n    } = this;\n\n    // degenerate case with several collinear points\n    if (collinear) {\n      const l = collinear.indexOf(i);\n      if (l > 0) yield collinear[l - 1];\n      if (l < collinear.length - 1) yield collinear[l + 1];\n      return;\n    }\n    const e0 = inedges[i];\n    if (e0 === -1) return; // coincident point\n    let e = e0,\n      p0 = -1;\n    do {\n      yield p0 = triangles[e];\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) return; // bad triangulation\n      e = halfedges[e];\n      if (e === -1) {\n        const p = hull[(_hullIndex[i] + 1) % hull.length];\n        if (p !== p0) yield p;\n        return;\n      }\n    } while (e !== e0);\n  }\n  find(x, y, i = 0) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;\n    const i0 = i;\n    let c;\n    while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) i = c;\n    return c;\n  }\n  _step(i, x, y) {\n    const {\n      inedges,\n      hull,\n      _hullIndex,\n      halfedges,\n      triangles,\n      points\n    } = this;\n    if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);\n    let c = i;\n    let dc = pow(x - points[i * 2], 2) + pow(y - points[i * 2 + 1], 2);\n    const e0 = inedges[i];\n    let e = e0;\n    do {\n      let t = triangles[e];\n      const dt = pow(x - points[t * 2], 2) + pow(y - points[t * 2 + 1], 2);\n      if (dt < dc) dc = dt, c = t;\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n      e = halfedges[e];\n      if (e === -1) {\n        e = hull[(_hullIndex[i] + 1) % hull.length];\n        if (e !== t) {\n          if (pow(x - points[e * 2], 2) + pow(y - points[e * 2 + 1], 2) < dc) return e;\n        }\n        break;\n      }\n    } while (e !== e0);\n    return c;\n  }\n  render(context) {\n    const buffer = context == null ? context = new Path() : undefined;\n    const {\n      points,\n      halfedges,\n      triangles\n    } = this;\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = triangles[i] * 2;\n      const tj = triangles[j] * 2;\n      context.moveTo(points[ti], points[ti + 1]);\n      context.lineTo(points[tj], points[tj + 1]);\n    }\n    this.renderHull(context);\n    return buffer && buffer.value();\n  }\n  renderPoints(context, r) {\n    if (r === undefined && (!context || typeof context.moveTo !== \"function\")) r = context, context = null;\n    r = r == undefined ? 2 : +r;\n    const buffer = context == null ? context = new Path() : undefined;\n    const {\n      points\n    } = this;\n    for (let i = 0, n = points.length; i < n; i += 2) {\n      const x = points[i],\n        y = points[i + 1];\n      context.moveTo(x + r, y);\n      context.arc(x, y, r, 0, tau);\n    }\n    return buffer && buffer.value();\n  }\n  renderHull(context) {\n    const buffer = context == null ? context = new Path() : undefined;\n    const {\n      hull,\n      points\n    } = this;\n    const h = hull[0] * 2,\n      n = hull.length;\n    context.moveTo(points[h], points[h + 1]);\n    for (let i = 1; i < n; ++i) {\n      const h = 2 * hull[i];\n      context.lineTo(points[h], points[h + 1]);\n    }\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  hullPolygon() {\n    const polygon = new Polygon();\n    this.renderHull(polygon);\n    return polygon.value();\n  }\n  renderTriangle(i, context) {\n    const buffer = context == null ? context = new Path() : undefined;\n    const {\n      points,\n      triangles\n    } = this;\n    const t0 = triangles[i *= 3] * 2;\n    const t1 = triangles[i + 1] * 2;\n    const t2 = triangles[i + 2] * 2;\n    context.moveTo(points[t0], points[t0 + 1]);\n    context.lineTo(points[t1], points[t1 + 1]);\n    context.lineTo(points[t2], points[t2 + 1]);\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  *trianglePolygons() {\n    const {\n      triangles\n    } = this;\n    for (let i = 0, n = triangles.length / 3; i < n; ++i) {\n      yield this.trianglePolygon(i);\n    }\n  }\n  trianglePolygon(i) {\n    const polygon = new Polygon();\n    this.renderTriangle(i, polygon);\n    return polygon.value();\n  }\n}\nfunction flatArray(points, fx, fy, that) {\n  const n = points.length;\n  const array = new Float64Array(n * 2);\n  for (let i = 0; i < n; ++i) {\n    const p = points[i];\n    array[i * 2] = fx.call(that, p, i, points);\n    array[i * 2 + 1] = fy.call(that, p, i, points);\n  }\n  return array;\n}\nfunction* flatIterable(points, fx, fy, that) {\n  let i = 0;\n  for (const p of points) {\n    yield fx.call(that, p, i, points);\n    yield fy.call(that, p, i, points);\n    ++i;\n  }\n}","map":{"version":3,"names":["Delaunator","Path","Polygon","Voronoi","tau","Math","PI","pow","pointX","p","pointY","collinear","d","triangles","coords","i","length","a","b","c","cross","jitter","x","y","r","sin","cos","Delaunay","from","points","fx","fy","that","flatArray","Float64Array","flatIterable","constructor","_delaunator","inedges","Int32Array","_hullIndex","_init","update","hull","_","sort","j","e","f","bounds","hypot","n","halfedges","fill","hullIndex","voronoi","neighbors","l","indexOf","e0","p0","find","i0","_step","dc","t","dt","render","context","buffer","undefined","ti","tj","moveTo","lineTo","renderHull","value","renderPoints","arc","h","closePath","hullPolygon","polygon","renderTriangle","t0","t1","t2","trianglePolygons","trianglePolygon","array","call"],"sources":["/Users/nguyenhaiharry/Library/CloudStorage/OneDrive-VietNamNationalUniversity-HCMINTERNATIONALUNIVERSITY/Desktop/Sem1_2023-2024/DVDS/World_Population_Analysis/global-population/population-analysis/node_modules/d3-delaunay/src/delaunay.js"],"sourcesContent":["import Delaunator from \"delaunator\";\nimport Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\nimport Voronoi from \"./voronoi.js\";\n\nconst tau = 2 * Math.PI, pow = Math.pow;\n\nfunction pointX(p) {\n  return p[0];\n}\n\nfunction pointY(p) {\n  return p[1];\n}\n\n// A triangulation is collinear if all its triangles have a non-null area\nfunction collinear(d) {\n  const {triangles, coords} = d;\n  for (let i = 0; i < triangles.length; i += 3) {\n    const a = 2 * triangles[i],\n          b = 2 * triangles[i + 1],\n          c = 2 * triangles[i + 2],\n          cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1])\n                - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);\n    if (cross > 1e-10) return false;\n  }\n  return true;\n}\n\nfunction jitter(x, y, r) {\n  return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];\n}\n\nexport default class Delaunay {\n  static from(points, fx = pointX, fy = pointY, that) {\n    return new Delaunay(\"length\" in points\n        ? flatArray(points, fx, fy, that)\n        : Float64Array.from(flatIterable(points, fx, fy, that)));\n  }\n  constructor(points) {\n    this._delaunator = new Delaunator(points);\n    this.inedges = new Int32Array(points.length / 2);\n    this._hullIndex = new Int32Array(points.length / 2);\n    this.points = this._delaunator.coords;\n    this._init();\n  }\n  update() {\n    this._delaunator.update();\n    this._init();\n    return this;\n  }\n  _init() {\n    const d = this._delaunator, points = this.points;\n\n    // check for collinear\n    if (d.hull && d.hull.length > 2 && collinear(d)) {\n      this.collinear = Int32Array.from({length: points.length/2}, (_,i) => i)\n        .sort((i, j) => points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]); // for exact neighbors\n      const e = this.collinear[0], f = this.collinear[this.collinear.length - 1],\n        bounds = [ points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1] ],\n        r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);\n      for (let i = 0, n = points.length / 2; i < n; ++i) {\n        const p = jitter(points[2 * i], points[2 * i + 1], r);\n        points[2 * i] = p[0];\n        points[2 * i + 1] = p[1];\n      }\n      this._delaunator = new Delaunator(points);\n    } else {\n      delete this.collinear;\n    }\n\n    const halfedges = this.halfedges = this._delaunator.halfedges;\n    const hull = this.hull = this._delaunator.hull;\n    const triangles = this.triangles = this._delaunator.triangles;\n    const inedges = this.inedges.fill(-1);\n    const hullIndex = this._hullIndex.fill(-1);\n\n    // Compute an index from each point to an (arbitrary) incoming halfedge\n    // Used to give the first neighbor of each point; for this reason,\n    // on the hull we give priority to exterior halfedges\n    for (let e = 0, n = halfedges.length; e < n; ++e) {\n      const p = triangles[e % 3 === 2 ? e - 2 : e + 1];\n      if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;\n    }\n    for (let i = 0, n = hull.length; i < n; ++i) {\n      hullIndex[hull[i]] = i;\n    }\n\n    // degenerate case: 1 or 2 (distinct) points\n    if (hull.length <= 2 && hull.length > 0) {\n      this.triangles = new Int32Array(3).fill(-1);\n      this.halfedges = new Int32Array(3).fill(-1);\n      this.triangles[0] = hull[0];\n      inedges[hull[0]] = 1;\n      if (hull.length === 2) {\n        inedges[hull[1]] = 0;\n        this.triangles[1] = hull[1];\n        this.triangles[2] = hull[1];\n      }\n    }\n  }\n  voronoi(bounds) {\n    return new Voronoi(this, bounds);\n  }\n  *neighbors(i) {\n    const {inedges, hull, _hullIndex, halfedges, triangles, collinear} = this;\n\n    // degenerate case with several collinear points\n    if (collinear) {\n      const l = collinear.indexOf(i);\n      if (l > 0) yield collinear[l - 1];\n      if (l < collinear.length - 1) yield collinear[l + 1];\n      return;\n    }\n\n    const e0 = inedges[i];\n    if (e0 === -1) return; // coincident point\n    let e = e0, p0 = -1;\n    do {\n      yield p0 = triangles[e];\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) return; // bad triangulation\n      e = halfedges[e];\n      if (e === -1) {\n        const p = hull[(_hullIndex[i] + 1) % hull.length];\n        if (p !== p0) yield p;\n        return;\n      }\n    } while (e !== e0);\n  }\n  find(x, y, i = 0) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;\n    const i0 = i;\n    let c;\n    while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) i = c;\n    return c;\n  }\n  _step(i, x, y) {\n    const {inedges, hull, _hullIndex, halfedges, triangles, points} = this;\n    if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);\n    let c = i;\n    let dc = pow(x - points[i * 2], 2) + pow(y - points[i * 2 + 1], 2);\n    const e0 = inedges[i];\n    let e = e0;\n    do {\n      let t = triangles[e];\n      const dt = pow(x - points[t * 2], 2) + pow(y - points[t * 2 + 1], 2);\n      if (dt < dc) dc = dt, c = t;\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n      e = halfedges[e];\n      if (e === -1) {\n        e = hull[(_hullIndex[i] + 1) % hull.length];\n        if (e !== t) {\n          if (pow(x - points[e * 2], 2) + pow(y - points[e * 2 + 1], 2) < dc) return e;\n        }\n        break;\n      }\n    } while (e !== e0);\n    return c;\n  }\n  render(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points, halfedges, triangles} = this;\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = triangles[i] * 2;\n      const tj = triangles[j] * 2;\n      context.moveTo(points[ti], points[ti + 1]);\n      context.lineTo(points[tj], points[tj + 1]);\n    }\n    this.renderHull(context);\n    return buffer && buffer.value();\n  }\n  renderPoints(context, r) {\n    if (r === undefined && (!context || typeof context.moveTo !== \"function\")) r = context, context = null;\n    r = r == undefined ? 2 : +r;\n    const buffer = context == null ? context = new Path : undefined;\n    const {points} = this;\n    for (let i = 0, n = points.length; i < n; i += 2) {\n      const x = points[i], y = points[i + 1];\n      context.moveTo(x + r, y);\n      context.arc(x, y, r, 0, tau);\n    }\n    return buffer && buffer.value();\n  }\n  renderHull(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {hull, points} = this;\n    const h = hull[0] * 2, n = hull.length;\n    context.moveTo(points[h], points[h + 1]);\n    for (let i = 1; i < n; ++i) {\n      const h = 2 * hull[i];\n      context.lineTo(points[h], points[h + 1]);\n    }\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  hullPolygon() {\n    const polygon = new Polygon;\n    this.renderHull(polygon);\n    return polygon.value();\n  }\n  renderTriangle(i, context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points, triangles} = this;\n    const t0 = triangles[i *= 3] * 2;\n    const t1 = triangles[i + 1] * 2;\n    const t2 = triangles[i + 2] * 2;\n    context.moveTo(points[t0], points[t0 + 1]);\n    context.lineTo(points[t1], points[t1 + 1]);\n    context.lineTo(points[t2], points[t2 + 1]);\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  *trianglePolygons() {\n    const {triangles} = this;\n    for (let i = 0, n = triangles.length / 3; i < n; ++i) {\n      yield this.trianglePolygon(i);\n    }\n  }\n  trianglePolygon(i) {\n    const polygon = new Polygon;\n    this.renderTriangle(i, polygon);\n    return polygon.value();\n  }\n}\n\nfunction flatArray(points, fx, fy, that) {\n  const n = points.length;\n  const array = new Float64Array(n * 2);\n  for (let i = 0; i < n; ++i) {\n    const p = points[i];\n    array[i * 2] = fx.call(that, p, i, points);\n    array[i * 2 + 1] = fy.call(that, p, i, points);\n  }\n  return array;\n}\n\nfunction* flatIterable(points, fx, fy, that) {\n  let i = 0;\n  for (const p of points) {\n    yield fx.call(that, p, i, points);\n    yield fy.call(that, p, i, points);\n    ++i;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}